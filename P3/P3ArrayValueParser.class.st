"
I am P3ArrayValueParser, I parse the external text representation of an array value.

Curly braces and commas are used for the structure, double quotes for strings and backslashes for escaping.

  {{1,2},{3,4}}

  {""NULL"",""\\"",""\"""",""\{"",""\}"",NULL,ONE,TWO}

See https://www.postgresql.org/docs/9.4/arrays.html#ARRAYS-IO

We do minimal error checking / error handling since this is a representation generated by the PostgreSQL server that is always correct.

"
Class {
	#name : 'P3ArrayValueParser',
	#superclass : 'Object',
	#instVars : [
		'stream',
		'converter'
	],
	#category : 'P3-Support',
	#package : 'P3',
	#tag : 'Support'
}

{ #category : 'private-parsing' }
P3ArrayValueParser >> consumeWhitespace [
	"Strip whitespaces from the input stream."

	[ stream atEnd not and: [ stream peek isSeparator ] ] whileTrue: [ 
		stream next ]
]

{ #category : 'private-parsing' }
P3ArrayValueParser >> convertElement: string [
	^ converter 
		ifNil: [ string ]
		ifNotNil: [ converter value: string ]
]

{ #category : 'instance creation' }
P3ArrayValueParser >> converter: block [
	"Set my converter to block, which will parse the text of array elements"
	
	converter := block
]

{ #category : 'accessing' }
P3ArrayValueParser >> next [
	"Parse and return the next array value"

	| char str |
	self consumeWhitespace.
	(char := stream peek) = ${
		ifTrue: [ ^ self parseArray ].
	char = $"
		ifTrue: [ str := self parseString ]
		ifFalse: [ (str := self parseElement) = 'NULL' ifTrue: [ ^ nil ] ].
	^ self convertElement: str
]

{ #category : 'instance creation' }
P3ArrayValueParser >> on: readStream [
	"Initialize me on the textual readStream given"
	
	stream := readStream
]

{ #category : 'private-parsing' }
P3ArrayValueParser >> parseArray [
	stream next. "Consume opening curly brace"
	^ Array streamContents: [ :array | 
		[ stream atEnd or: [ stream peekFor: $} ] ] whileFalse: [ 
			array nextPut: self next.
			self consumeWhitespace.
			stream peekFor: $, ] ]
]

{ #category : 'private-parsing' }
P3ArrayValueParser >> parseElement [
	^ String streamContents: [ :string | 
		[ stream atEnd or: [ ',}' includes: stream peek ] ] whileFalse: [ 
			string nextPut: stream next ] ]
]

{ #category : 'private-parsing' }
P3ArrayValueParser >> parseString [
	stream next. "Consume opening double quote"
	^ String streamContents: [ :string | 
		[ stream atEnd or: [ stream peekFor: $" ] ] whileFalse: [ | char |
			(char := stream next) = $\ ifTrue: [ char := stream next ].
			string nextPut: char ] ]
]
